// install npm package globally to be used anywhere in the app

// npm install
// npm i
// npm add

// nodemon -g
// monitors your files, as you save, it restarts your server
// type nodemon instead of node, will look for index.js by default
// for a different file name, like server, type nodemon server.js

// watching extensions js, mjs, and json
// ctrl + c to exit nodemon

//------------------------------------------

// add a package to our project
// before we do that we have to initialize npm for our project
// npm init
// will ask questions, add flag -y to skip questions
// will ask package name - whatever you named the folder
// version number
// description
// entry point (index.js) -> this will show by default, could change to server.js
// test command, git repository, no keywords, could put my name for author, license by default
// finally, is this OK?

// installs package.json
// important bc its what npm reads to know what packages to install for my project
// this file stays with repository if we send to github
// we dont send the packages itself
// this way we dont have to transfer/store as much data
// somebody else can clone it, and they dont have to copy over all of the module data
// they can install the necessary packages there, rather than transfer them over from GitHub

// package-lock.json - only handled by npm, we dont deal with that
// adds the node modules files - get large fast
// any dependency we add can also pull in other dependencies
// this is why we should include a .gitignore - first thing to add is node_modules

// dependencies are for the project
// dev dependencies can be installed as well

// npm install - reads package.json file, installs the node modules you need
// important if you pull a repo from github, and want to install the modules used in it

// lets add nodemon as a dev dependency - its already a global dependency
// using this as an example of installing a dev dependency
// npm i nodemon --save-dev OR npm i nodemon -D (will save nodemon as a dev dependency)
// production dependencies, we dont need to put a flag after it, will go directly to the dependencies
// npm i uuid - gives unique IDs

// server uses scripts to run the application if we were to host this somewhere
// will see a start, dev, or build script - remember these scripts default to index.js
// npm start OR npm run dev

// for dependencies and dev dependencies - we get semantic numbers
// first number is a major version number, second is a minor version, third number is a patch
// the ^ in front means it will auto update a minor version, or a patch if needed, but do not update a major version
// major versions could have breaking changes to your app
// ~ patch only update, not minor or major
// * update everything all the time - not too safe
// to install a version
// npm install uuid@8.3.1
// to check for updates - npm update

uuid will generate a unique ID

// npm uninstall OR un OR rm
// npm rm nodemon -D (its a dev dependency, we need the flag)
// does not change the script in package.json when we un install so we need to check that as well