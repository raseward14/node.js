protected routes
Node & Express web API: JWT means- JSON Web Token
form or user identification after the initial user authentication takes place
when user completes their authentication, REST API will issue client application an access token & a refresh token
access token = short time before it expires (5 to 15 minutes)
refresh token = longer duration before it expires (several hours, a day, or even days)

Hazards
XSS: Cross-site scripting
CSRF: Cross-site request forgery

API sends & receives access tokens as JSON data
to avoid the previous risks
front end client applications recommended to only store access tokens in memory, so the memory will be automatically lost when the app is closed
should not be stored in localStorage or a cookie
if you can store it somewhere with JavaScript, a hacker can also retrieve it with JavaScript
keep access tokens in memory/ current application state

API will issue refresh tokens as HTTPOnly cookie
Not accessible with JavaScript
must have expiry at some point - requires user to log in again
refresh tokens should not have the ability to issue new refresh tokens - grants indefinite access if it falls into the wrong hands

*OVERALL PROCESS

ACCESS TOKEN:
1. Issued at user Authorization
        -USERS APPLICATION can then access our RESTAPIs protected routes with access token access until it expires
        API verifies access token with middleware every time the access token is used to make a request

2. when the access token does expire, the users application will need to send our refresh token to our APIs refresh endpoint to get a new access token
        -RESTAPIs endpoint will verify the token, and cross reference the refresh token in our database
        -storing a reference to the refresh token in the database will allow refresh tokens to be terminated early if the user decides to log out
        -refresh tokens must be allowed to expire so indefinite access cannot be gained

3. refresh token also issued at user authorization

*NODE PACKAGES WE need
1. dotenv
2. jsonwebtoken
3. cookie-parser

open terminal window, type node - now we are running node
type this
require('crypto').randomBytes(64).toString('hex')
gives us a random crypto bytes string that we can use as our access token

copy it - no quotes 
use as access_token in .env file
do the same to generate a refresh token

ctrl+c twice exits node at the command line
4:16:20
